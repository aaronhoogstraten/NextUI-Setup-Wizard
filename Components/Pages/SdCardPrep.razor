@page "/sd-card-prep"
@using System.IO
@using System.IO.Compression
@using System.Runtime.InteropServices
@using CommunityToolkit.Maui.Storage
@using NextUI_Setup_Wizard.Resources
@using NextUI_Setup_Wizard.Components.Layout
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<!-- Splash overlay -->
<div class="splash-overlay" id="splashOverlay">
    <div class="splash-content">
        <h1 class="splash-title">NextUI Setup Wizard</h1>
    </div>
</div>

<LogZipper IsVisible="showLogZipperOverlay" OnHide="HideLogZipperOverlay" />

<div class="compact-container">
    <div class="page-header-container">
        <button class="toolbox-btn" @onclick="ShowLogZipperOverlay" title="Tools">
            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/>
            </svg>
        </button>
        <h3 data-ref="page-header">SD Card Preparation</h3>
    </div>

    @if (currentStep == Step.Instructions)
    {
        <div class="compact-section">
            <div class="step-header sticky-header flex justify-between align-center">
                <h4>Step 1: Insert and Format Your SD Card</h4>
                <div class="step-indicator">1 of 2</div>
            </div>

            <div class="warning-box">
                <h5>⚠️ Important Warning</h5>
                <p><strong>Formatting will erase all data on your SD card.</strong> Please backup important files first.</p>
            </div>

            <div class="instructions">
                <div class="info-box mb-md">
                    <p class="text-sm">ℹ️ <strong>Note:</strong> FAT32 or exFAT format can be used. FAT32 is generally considered the most stable, but exFAT supports having individual files over 4GB in size.</p>
                </div>

                <div class="platform-instructions flex justify-center">
                    @if (Utils.CurrentOS == OSType.Mac)
                    {
                        <div class="platform-section">
                            <h5>🍎 macOS Instructions</h5>
                            <div class="instruction-steps text-sm">
                                <ol>
                                    <li><strong>Insert your SD card</strong> into your computer's SD card reader</li>
                                    <li>Open <strong>Disk Utility</strong> (Applications → Utilities → Disk Utility)</li>
                                    <li>Select your SD card from the sidebar</li>
                                    <li>Click <strong>Erase</strong></li>
                                    <li>Give it a name (e.g. NextUI)</li>
                                    <li>Choose format: <strong>MS-DOS (FAT)</strong> for FAT32 or <strong>ExFAT</strong></li>
                                    <li>Set Scheme to <strong>Master Boot Record</strong></li>
                                    <li>Click <strong>Erase</strong> to format</li>
                                </ol>
                            </div>
                        </div>
                    }
                    else if (Utils.CurrentOS == OSType.Windows)
                    {
                        <div class="platform-section">
                            <h5>🪟 Windows Instructions</h5>
                            <div class="instruction-steps text-sm">
                                <ol>
                                    <li><strong>Insert your SD card</strong> into your computer's SD card reader</li>
                                    <li>Download <a href="https://rufus.ie/" target="_blank">Rufus</a> (free tool)</li>
                                    <li>Run Rufus</li>
                                    <li>Select your SD card from the <span class="option">Device</span> dropdown</li>
                                    <li>Set <span class="option">Boot selection</span> to <strong>Non bootable</strong></li>
                                    <li>Set <span class="option"> Partition scheme</span> to <strong>MBR</strong></li>
                                    <li>Set <span class="option"> File system</span> to <strong>FAT32</strong> or <strong>exFAT</strong></li>
                                    <li>Under <span class="option"> Volume Label</span>, choose a name (e.g. NextUI) </li>
                                    <li>Click <strong>START</strong> to format</li>
                                </ol>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="platform-section">
                            <h5>⚠️ Unsupported Platform</h5>
                            <div class="instruction-steps text-sm">
                                <p><strong>Insert your SD card</strong> into your computer's SD card reader, then format it using your system's disk management tools with the following requirements:</p>
                                <ul>
                                    <li>File system: FAT32 or exFAT</li>
                                    <li>Partition scheme: Master Boot Record (MBR)</li>
                                </ul>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <div class="inline-actions mt-lg">
                <button class="btn btn-primary" @onclick="ProceedToValidation">
                    I have formatted my SD card
                </button>
            </div>
        </div>
    }
    else if (currentStep == Step.Validation)
    {
        <div class="compact-section">
            <div class="step-header sticky-header flex justify-between align-center">
                <h4>Step 2: Select Your SD Card</h4>
                <div class="step-indicator">2 of 2</div>
            </div>

            @if (isValidating)
            {
                <div class="loading">
                    <p>Validating SD card...</p>
                </div>
            }
            else if (!string.IsNullOrEmpty(validationError))
            {
                <div class="validation-error">
                    <h5>❌ Validation Failed</h5>
                    <p>@validationError</p>
                    <div class="inline-actions mt-lg">
                        <button class="btn btn-primary" @onclick="SelectSDCard">Try Again</button>
                        <button class="btn btn-secondary" @onclick="BackToInstructions">Back to Instructions</button>
                    </div>
                </div>
            }
            else if (showWipeConfirmation)
            {
                <div class="wipe-confirmation">
                    <h5>⚠️ Confirm SD Card Wipe</h5>
                    <div class="warning-message">
                        <p><strong>Warning:</strong> Your SD card contains an existing NextUI installation. Continuing with full setup will permanently delete all files on the SD card, including:</p>
                        <ul>
                            <li>The existing NextUI installation</li>
                            <li>All BIOS files</li>
                            <li>All ROM files</li>
                            <li>Any other files on the SD card</li>
                        </ul>
                        <p><strong>This action cannot be undone!</strong></p>
                    </div>

                    <div class="sd-card-path-display">
                        <p><strong>SD Card Path:</strong> @selectedPath</p>
                    </div>
                    
                    @if (isWiping)
                    {
                        <div data-ref="progress-container" class="wipe-progress">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: @(wipePercentage)%"></div>
                            </div>
                            <p class="progress-text">@wipeProgress</p>
                        </div>
                    }
                    else
                    {
                        <div class="inline-actions mt-lg">
                            <button class="btn btn-danger" @onclick="ConfirmWipeAndProceed">
                                Yes, Wipe SD Card and Continue
                            </button>
                            <button class="btn btn-secondary" @onclick="CancelWipe">
                                Cancel
                            </button>
                        </div>
                    }
                </div>
            }
            else if (validationSuccess)
            {
                <div class="validation-success">
                    <h5>✅ SD Card Validated Successfully!</h5>
                    @if (nextUIDetected)
                    {
                        <div class="nextui-detected">
                            <h6>🎉 NextUI Installation Detected!</h6>
                            <p>Your SD card already contains a NextUI installation. You can skip the download and setup steps and go directly to BIOS/ROM configuration.</p>
                        </div>
                    }
                    <div class="sd-card-info">
                        <p><strong>Path:</strong> @selectedPath</p>
                        <p><strong>File System:</strong> @fileSystem</p>
                        <p><strong>Partition Scheme:</strong> @partitionScheme</p>
                        <p><strong>Total Size:</strong> @FormatBytes(totalSize)</p>
                        <p><strong>Available Space:</strong> @FormatBytes(availableSpace)</p>
                        <p><strong>Label:</strong> @(string.IsNullOrEmpty(volumeLabel) ? "(No label)" : volumeLabel)</p>
                        @if (nextUIDetected)
                        {
                            <p><strong>NextUI Status:</strong> ✅ Installed</p>
                        }
                    </div>

                    <div class="inline-actions mt-lg">
                        @if (nextUIDetected)
                        {
                            <button class="btn btn-success" @onclick="SkipToConfiguration">
                                Skip to BIOS/ROM Configuration
                            </button>
                            <button class="btn btn-primary" @onclick="ProceedWithSDCard">
                                Continue with Full Setup
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="ProceedWithSDCard">
                                Continue with this SD card
                            </button>
                        }
                        <button class="btn btn-secondary" @onclick="SelectDifferentCard">
                            Select Different SD Card
                        </button>
                    </div>
                </div>
            }
            else
            {
                <div class="selection-prompt">
                    <p>Please select the root directory of your formatted SD card.</p>
                    <p class="hint">Look for your SD card in the file browser (it should appear as a removable drive).</p>

                    <div class="inline-actions mt-lg">
                        <button class="btn btn-primary" @onclick="SelectSDCard">
                            📁 Select SD Card Directory
                        </button>
                        <button class="btn btn-secondary" @onclick="BackToInstructions">
                            Back to Instructions
                        </button>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Splash overlay styles */
    .splash-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        justify-content: center;
        align-items: center;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        z-index: 9999;
        opacity: 1;
        transition: opacity 1.5s ease-out;
    }

    .splash-overlay.fade-out {
        opacity: 0;
        pointer-events: none;
    }

    .splash-content {
        text-align: center;
    }

    .splash-title {
        color: white;
        font-size: 3rem;
        font-weight: 300;
        margin-bottom: 2rem;
        text-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
        letter-spacing: 2px;
    }

    @@media (max-width: 768px) {
        .splash-title {
            font-size: 2rem;
            letter-spacing: 1px;
        }
    }

    .step-header {
        padding-bottom: 15px;
        border-bottom: 2px solid #e1e5e9;
    }

        .step-header h4 {
            margin: 0;
            color: #0366d6;
            font-size: 1.5em;
        }

    .step-indicator {
        background: #0366d6;
        color: white;
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: 500;
        font-size: 0.9em;
    }

    .warning-box {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 4px;
        padding: var(--spacing-md);
        margin-bottom: var(--spacing-lg);
        border-left: 4px solid #f39c12;
    }

        .warning-box h5 {
            margin: 0 0 8px 0;
            color: #856404;
            font-size: 1.1em;
        }

        .warning-box p {
            margin: 0;
            color: #856404;
        }

    .instructions {
        background: #f6f8fa;
        padding: var(--spacing-lg);
        border-radius: 4px;
        margin-bottom: var(--spacing-lg);
    }

        .instructions > ol {
            margin: 0 0 var(--spacing-lg) 0;
            padding-left: var(--spacing-xl);
        }

            .instructions > ol > li {
                margin-bottom: var(--spacing-sm);
                font-weight: 500;
            }

    .info-box {
        background: #e1f5fe;
        border: 1px solid #81d4fa;
        border-radius: 4px;
        padding: var(--spacing-md);
        margin-bottom: var(--spacing-lg);
        border-left: 4px solid #2196f3;
    }

        .info-box p {
            margin: 0;
            color: #0d47a1;
        }

    .platform-instructions {
        display: grid;
        gap: var(--spacing-md);
    }

    .option {
        color: #0d47a1;
    }

    .platform-section {
        background: white;
        padding: 18px;
        border-radius: 8px;
        border: 1px solid #d0d7de;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

        .platform-section h5 {
            margin: 0 0 12px 0;
            color: #24292e;
            font-size: 1.1em;
            padding-bottom: 8px;
            border-bottom: 1px solid #e1e5e9;
        }

    .instruction-steps ol {
        margin: 8px 0;
        padding-left: 20px;
    }

    .instruction-steps li {
        margin-bottom: 6px;
        line-height: 1.5;
    }

    .instruction-steps p {
        margin: 12px 0 8px 0;
        font-weight: 500;
        color: #24292e;
    }

    .instruction-steps code {
        background: #f3f4f6;
        padding: 2px 6px;
        border-radius: 3px;
        font-family: 'SFMono-Regular', Consolas, monospace;
        font-size: 0.9em;
        color: #d73a49;
    }

    .format-requirements {
        background: #e6fffa;
        border: 1px solid #9ae6b4;
        border-radius: 6px;
        padding: 15px;
        margin-top: 20px;
        border-left: 4px solid #28a745;
    }

        .format-requirements h5 {
            margin: 0 0 10px 0;
            color: #155724;
            font-size: 1em;
        }

        .format-requirements ul {
            margin: 0;
            padding-left: 20px;
        }

        .format-requirements li {
            margin-bottom: 4px;
            color: #155724;
        }

    .loading {
        text-align: center;
        padding: 40px;
        color: #666;
    }

    .validation-error, .validation-success {
        padding: 20px;
        border-radius: 6px;
        margin-bottom: 20px;
    }

    .validation-error {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

        .validation-error h5 {
            margin: 0 0 10px 0;
            font-size: 1.1em;
        }

    .validation-success {
        background: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

        .validation-success h5 {
            margin: 0 0 15px 0;
            font-size: 1.1em;
        }

    .nextui-detected {
        background: #e7f3ff;
        border: 1px solid #b3d9ff;
        border-radius: 6px;
        padding: 15px;
        margin: 15px 0;
        border-left: 4px solid #007acc;
    }

        .nextui-detected h6 {
            margin: 0 0 8px 0;
            color: #004d7a;
            font-size: 1em;
            font-weight: 600;
        }

        .nextui-detected p {
            margin: 0;
            color: #004d7a;
            font-size: 0.9em;
        }

    .wipe-confirmation {
        background: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 6px;
        padding: 20px;
        margin-bottom: 20px;
        border-left: 4px solid #dc3545;
    }

        .wipe-confirmation h5 {
            margin: 0 0 15px 0;
            color: #721c24;
            font-size: 1.1em;
            font-weight: 600;
        }

    .warning-message {
        background: rgba(255,255,255,0.7);
        padding: 15px;
        border-radius: 6px;
        margin-bottom: 20px;
    }

        .warning-message p {
            margin: 8px 0;
            color: #721c24;
            line-height: 1.5;
        }

        .warning-message ul {
            margin: 10px 0;
            padding-left: 20px;
            color: #721c24;
        }

        .warning-message li {
            margin-bottom: 4px;
        }

    .sd-card-path-display {
        background: rgba(255, 255, 255, 0.9);
        padding: var(--spacing-md);
        border-radius: 4px;
        margin: var(--spacing-md) 0;
        border: 1px solid #dc3545;
        font-family: 'SFMono-Regular', Consolas, monospace;
        font-size: 0.9em;
    }

        .sd-card-path-display p {
            margin: 0;
            color: #721c24;
            word-break: break-all;
        }

    .wipe-progress {
        margin: 15px 0;
        padding: 15px;
        background: rgba(255,255,255,0.7);
        border-radius: 6px;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
        border-color: #dc3545;
    }

        .btn-danger:hover {
            background: #c82333;
            border-color: #bd2130;
        }

    .sd-card-info {
        background: rgba(255,255,255,0.7);
        padding: 15px;
        border-radius: 6px;
        margin: 15px 0;
        font-family: 'SFMono-Regular', Consolas, monospace;
        font-size: 0.9em;
    }

        .sd-card-info p {
            margin: 5px 0;
        }

    .selection-prompt {
        text-align: center;
        padding: 30px;
        background: #f6f8fa;
        border-radius: 6px;
        border: 2px dashed #d0d7de;
    }

        .selection-prompt .hint {
            color: #586069;
            font-size: 0.9em;
            margin-top: 10px;
        }


    .btn {
        padding: 10px 16px;
        border: 1px solid #d0d7de;
        border-radius: 6px;
        background: #f6f8fa;
        color: #24292e;
        text-decoration: none;
        cursor: pointer;
        font-size: 14px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s;
        gap: 6px;
    }

        .btn:hover {
            background: #f3f4f6;
            border-color: #d0d7de;
        }

    .btn-primary {
        background: #2da44e;
        color: white;
        border-color: #2da44e;
    }

        .btn-primary:hover {
            background: #2c974b;
            border-color: #2c974b;
        }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            background: #5c636a;
            border-color: #5c636a;
        }

    .btn-success {
        background: #28a745;
        color: white;
        border-color: #28a745;
    }

        .btn-success:hover {
            background: #218838;
            border-color: #1e7e34;
        }

    /* Page header and toolbox button styles */
    .page-header-container {
        position: relative;
        display: flex;
        align-items: center;
        margin-bottom: var(--spacing-lg);
    }

    .toolbox-btn {
        position: absolute;
        left: 0;
        top: 50%;
        transform: translateY(-50%);
        background: #f6f8fa;
        border: 1px solid #d0d7de;
        border-radius: 6px;
        padding: 8px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.2s;
        z-index: 10;
    }

        .toolbox-btn:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }

        .toolbox-btn svg {
            color: #586069;
        }

    .page-header-container h3 {
        flex: 1;
        text-align: center;
        margin: 0;
    }


    @@media (max-width: 768px) {
        .step-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }

        .btn {
            text-align: center;
            justify-content: center;
        }

        .page-header-container {
            flex-direction: column;
            align-items: center;
            gap: 15px;
        }

        .toolbox-btn {
            position: static;
            transform: none;
        }

    }
</style>

@code {
    private enum Step
    {
        Instructions,
        Validation
    }

    private Step currentStep = Step.Instructions;
    private bool isValidating = false;
    private string validationError = "";
    private bool validationSuccess = false;
    private string selectedPath = "";
    private string fileSystem = "";
    private long totalSize = 0;
    private long availableSpace = 0;
    private string volumeLabel = "";
    private string partitionScheme = "";
    private bool nextUIDetected = false;
    private bool showWipeConfirmation = false;
    private bool isWiping = false;
    private string wipeProgress = "";
    private int wipePercentage = 0;

    // Log zipper overlay variable
    private bool showLogZipperOverlay = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Remove splash-active classes to revert to normal background
            await JSRuntime.InvokeVoidAsync("eval", @"
                document.documentElement.classList.remove('splash-active');
                document.body.classList.remove('splash-active');
                document.getElementById('app').classList.remove('splash-active');
            ");

            // Add fade-out class to trigger transition
            await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('splashOverlay').classList.add('fade-out')");

            // Scroll to page header when page first loads
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('[data-ref=\"page-header\"]').scrollIntoView({behavior: 'auto', block: 'start'});");
        }
    }

    private void ProceedToValidation()
    {
        currentStep = Step.Validation;
        validationError = "";
        validationSuccess = false;
        StateHasChanged();
    }

    private void BackToInstructions()
    {
        currentStep = Step.Instructions;
        validationError = "";
        validationSuccess = false;
        nextUIDetected = false;
        showWipeConfirmation = false;
        isWiping = false;
        StateHasChanged();
    }

    private void SetValidationState(string error = "", bool success = false, bool stopValidating = true)
    {
        if (stopValidating)
            isValidating = false;
        validationError = error;
        validationSuccess = success;
        StateHasChanged();
    }

    private void SetWipeState(string progress = "", int percentage = 0)
    {
        wipeProgress = progress;
        wipePercentage = percentage;
        StateHasChanged();
    }


    private async Task SelectSDCard()
    {
        try
        {
            isValidating = true;
            validationError = "";
            validationSuccess = false;
            StateHasChanged();

            // Use folder picker to select SD card root
            var folderResult = await FolderPicker.Default.PickAsync(CancellationToken.None);
            if (folderResult == null || !folderResult.IsSuccessful)
            {
                SetValidationState("No directory selected. Please select your SD card's root directory.");
                return;
            }

            selectedPath = folderResult.Folder.Path;

            // Validate the selected path
            await ValidateSDCard(selectedPath);
        }
        catch (Exception ex)
        {
            SetValidationState($"Error selecting directory: {ex.Message}");
        }
    }

    private async Task ValidateSDCard(string path)
    {
        try
        {
            await Task.Delay(500); // Small delay for UX

            // Get the drive info for the selected path
            var drives = DriveInfo.GetDrives();
            DriveInfo? targetDrive = null;

            // Find the drive that exactly matches this path's root
            foreach (var drive in drives)
            {
                try
                {
                    var rootPath = drive.RootDirectory.FullName;
                    if (string.Equals(path, rootPath, StringComparison.OrdinalIgnoreCase) ||
                        string.Equals(path.TrimEnd(Path.DirectorySeparatorChar, Path.AltDirectorySeparatorChar) + Path.DirectorySeparatorChar, rootPath, StringComparison.OrdinalIgnoreCase))
                    {
                        targetDrive = drive;
                        break;
                    }
                }
                catch
                {
                    // Skip drives that can't be accessed
                    continue;
                }
            }

            if (targetDrive == null)
            {
                SetValidationState("Could not identify the drive for the selected path. Please ensure you've selected the root directory of your SD card.");
                return;
            }

            // Check if it's a removable drive (typical for SD cards)
            if (targetDrive.DriveType != DriveType.Removable && targetDrive.DriveType != DriveType.Fixed)
            {
                SetValidationState($"The selected drive appears to be a {targetDrive.DriveType} drive. Please select a removable SD card.");
                return;
            }

            // Check if drive is ready
            if (!targetDrive.IsReady)
            {
                SetValidationState("The selected drive is not ready. Please ensure your SD card is properly inserted and try again.");
                return;
            }

            // Get file system information using PartitionSchemeDetector for better cross-platform support
            var partitionInfo = await PartitionSchemeDetector.DetectPartitionScheme(path);

            using var logger = new Logger();

            if (!string.IsNullOrEmpty(partitionInfo.ErrorMessage) || string.IsNullOrEmpty(partitionInfo.FileSystem))
            {
                // Fallback to DriveInfo if PartitionSchemeDetector fails
                fileSystem = targetDrive.DriveFormat.ToUpperInvariant();
                logger.Log($"Fallback to DriveInfo from PartitionSchemeDetector failure({partitionInfo.ErrorMessage}), fileSystem: {fileSystem}");
            }
            else
            {
                // Use PartitionSchemeDetector result and normalize the file system name
                var detectedFS = partitionInfo.FileSystem.ToUpperInvariant();

                // Map macOS diskutil output to standard names
                if (detectedFS.Contains("FAT32"))
                {
                    fileSystem = "FAT32";
                }
                else if (detectedFS.Contains("EXFAT"))
                {
                    fileSystem = "EXFAT";
                }
                else
                {
                    fileSystem = detectedFS;
                }
            }

            // Validate file system
            if (fileSystem != "FAT32" && fileSystem != "EXFAT")
            {
                SetValidationState($"Invalid file system detected: {fileSystem}. Please format your SD card to FAT32 or exFAT and try again.");
                return;
            }

            // Get size information
            totalSize = targetDrive.TotalSize;
            availableSpace = targetDrive.AvailableFreeSpace;

            // Get volume label
            volumeLabel = string.IsNullOrEmpty(targetDrive.VolumeLabel) ? "" : targetDrive.VolumeLabel;

            // Check if the SD card has enough space (at least 100MB for NextUI)
            const long minimumSpace = 100 * 1024 * 1024; // 100MB
            if (availableSpace < minimumSpace)
            {
                SetValidationState($"Insufficient space on SD card. Available: {FormatBytes(availableSpace)}, Required: {FormatBytes(minimumSpace)}");
                return;
            }

            // Check if SD card is relatively empty (less than 10% used, or less than 1GB used)
            var usedSpace = totalSize - availableSpace;
            var usagePercentage = (double)usedSpace / totalSize * 100;
            const long maxUsedSpace = 1024 * 1024 * 1024; // 1GB

            if (usagePercentage > 10 && usedSpace > maxUsedSpace)
            {
                SetValidationState($"SD card appears to contain significant data ({FormatBytes(usedSpace)} used, {usagePercentage:F1}% full). Please use a freshly formatted SD card to avoid conflicts.");
                return;
            }

            if (!string.IsNullOrEmpty(partitionInfo.ErrorMessage))
            {
                SetValidationState($"Could not detect partition scheme: {partitionInfo.ErrorMessage}");
                return;
            }
            
            if (partitionInfo.Scheme != PartitionSchemeDetector.PartitionScheme.MBR)
            {
                SetValidationState("SD card is not partitioned as Master Boot Record (MBR)");
                return;
            }

            partitionScheme = "Master Boot Record (MBR)";

            // Check if NextUI is already installed
            nextUIDetected = await IsNextUIInstalled(path);
            
            // If NextUI is not detected, check if the SD card is empty
            if (!nextUIDetected && !IsDirectoryEmpty(path))
            {
                SetValidationState("SD card is not empty and does not contain a NextUI installation. Please use a freshly formatted SD card to avoid conflicts with existing files.");
                return;
            }

            // All validations passed
            SetValidationState(success: true);
        }
        catch (Exception ex)
        {
            SetValidationState($"Validation error: {ex.Message}");
        }
    }

    private void SelectDifferentCard()
    {
        validationSuccess = false;
        validationError = "";
        selectedPath = "";
        nextUIDetected = false;
        showWipeConfirmation = false;
        isWiping = false;
        StateHasChanged();
    }

    private void ProceedWithSDCard()
    {
        if (nextUIDetected)
        {
            // Show confirmation prompt to wipe existing files
            showWipeConfirmation = true;
            StateHasChanged();
        }
        else
        {
            // Navigate to the next step with the SD card path
            Navigation.NavigateTo($"/release-info/{Uri.EscapeDataString(selectedPath)}");
        }
    }

    private void SkipToConfiguration()
    {
        // Skip NextUI download and go directly to BIOS configuration
        Navigation.NavigateTo($"/bios-config/{Uri.EscapeDataString(selectedPath)}");
    }

    private void CancelWipe()
    {
        showWipeConfirmation = false;
        StateHasChanged();
    }

    private async Task ConfirmWipeAndProceed()
    {
        try
        {
            isWiping = true;
            wipeProgress = "Preparing to wipe SD card...";
            wipePercentage = 0;
            StateHasChanged();
            
            // Auto-scroll to progress bar
            await Task.Delay(50); // Allow DOM to render
            await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('[data-ref=\"progress-container\"]').scrollIntoView({{behavior: 'smooth', block: 'end'}});");

            await WipeSDCard(selectedPath);

            // After successful wipe, proceed to NextUI download
            Navigation.NavigateTo($"/release-info/{Uri.EscapeDataString(selectedPath)}");
        }
        catch (Exception ex)
        {
            isWiping = false;
            showWipeConfirmation = false;
            SetValidationState($"Failed to wipe SD card: {ex.Message}");
        }
    }

    private async Task WipeSDCard(string path)
    {
        try
        {
            SetWipeState("Scanning files and directories...", 10);
            await Task.Delay(500);

            // Get all files and directories
            var allEntries = Directory.GetFileSystemEntries(path, "*", SearchOption.AllDirectories)
                .OrderByDescending(p => p.Length) // Delete deepest paths first
                .ToList();

            var rootEntries = Directory.GetFileSystemEntries(path)
                .Where(entry => !FileSystemHelper.IsSystemFile(Path.GetFileName(entry)))
                .ToList();

            SetWipeState($"Found {allEntries.Count} items to delete...", 20);
            await Task.Delay(500);

            if (allEntries.Count == 0)
            {
                SetWipeState("SD card is already empty", 100);
                return;
            }

            // Delete files first, then directories
            var files = allEntries.Where(File.Exists).ToList();
            var directories = allEntries.Where(Directory.Exists).ToList();

            int totalItems = files.Count + directories.Count;
            int processedItems = 0;

            // Delete files
            foreach (var file in files)
            {
                try
                {
                    File.SetAttributes(file, FileAttributes.Normal); // Remove read-only if set
                    File.Delete(file);
                    processedItems++;

                    SetWipeState($"Deleting files... ({processedItems}/{totalItems})", 20 + (int)((processedItems * 60.0) / totalItems));

                    if (processedItems % 10 == 0) // Update UI every 10 files
                        await Task.Delay(10);
                }
                catch (Exception ex)
                {
                    // Log but continue with other files
                    System.Diagnostics.Debug.WriteLine($"Failed to delete file {file}: {ex.Message}");
                }
            }

            // Delete directories (in reverse order to delete children before parents)
            foreach (var directory in directories.OrderByDescending(d => d.Length))
            {
                try
                {
                    if (Directory.Exists(directory))
                    {
                        Directory.Delete(directory, true);
                        processedItems++;

                        SetWipeState($"Deleting directories... ({processedItems}/{totalItems})", 20 + (int)((processedItems * 60.0) / totalItems));

                        if (processedItems % 5 == 0) // Update UI every 5 directories
                            await Task.Delay(10);
                    }
                }
                catch (Exception ex)
                {
                    // Log but continue with other directories
                    System.Diagnostics.Debug.WriteLine($"Failed to delete directory {directory}: {ex.Message}");
                }
            }

            SetWipeState("Verifying deletion...", 90);
            await Task.Delay(500);

            // Verify the SD card is now empty (except system files)
            var remainingEntries = Directory.GetFileSystemEntries(path)
                .Where(entry => !FileSystemHelper.IsSystemFile(Path.GetFileName(entry)))
                .ToList();

            if (remainingEntries.Any())
            {
                throw new Exception($"Failed to delete all files. {remainingEntries.Count} items remain.");
            }

            SetWipeState("SD card wiped successfully!", 100);
            await Task.Delay(1000);
        }
        catch (Exception ex)
        {
            throw new Exception($"Wipe operation failed: {ex.Message}");
        }
    }

    private string FormatBytes(long bytes)
    {
        if (bytes == 0) return "0 B";

        string[] sizes = { "B", "KB", "MB", "GB", "TB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }
    
    private bool IsDirectoryEmpty(string directoryPath)
    {
        try
        {
            if (!Directory.Exists(directoryPath))
            {
                return true; // Directory doesn't exist, so it's "empty"
            }
            
            // Check for any entries in the root directory (including subdirectories and hidden files)
            var entries = Directory.GetFileSystemEntries(directoryPath);
            
            // Filter out common hidden system files that we might want to ignore
            var filteredEntries = entries.Where(entry =>
            {
                var fileName = Path.GetFileName(entry);
                return !FileSystemHelper.IsSystemFile(fileName);
            });
            
            return !filteredEntries.Any();
        }
        catch (Exception)
        {
            // If we can't read the directory, assume it's not empty for safety
            return false;
        }
    }
    
    
    private async Task<bool> IsNextUIInstalled(string path)
    {
        try
        {
            // Check for MinUI.zip and read .system/version.txt from inside the zip
            var minUIZipPath = Path.Combine(path, "MinUI.zip");
            if (await CheckVersionInZip(minUIZipPath))
                return true;
                
            // Check for .system\version.txt directly on filesystem
            var systemVersionPath = Path.Combine(path, ".system", "version.txt");
            if (await CheckVersionFile(systemVersionPath))
                return true;
                
            return false;
        }
        catch (Exception)
        {
            return false;
        }
    }
    
    private async Task<bool> CheckVersionInZip(string zipFilePath)
    {
        try
        {
            if (!File.Exists(zipFilePath))
                return false;
                
            using var zip = ZipFile.OpenRead(zipFilePath);
            var versionEntry = zip.GetEntry(".system/version.txt");
            if (versionEntry == null)
                return false;
                
            using var stream = versionEntry.Open();
            using var reader = new StreamReader(stream);
            var content = await reader.ReadToEndAsync();
            
            return content.Contains("NextUI", StringComparison.OrdinalIgnoreCase);
        }
        catch (Exception)
        {
            return false;
        }
    }
    
    private async Task<bool> CheckVersionFile(string filePath)
    {
        try
        {
            if (!File.Exists(filePath))
                return false;

            var content = await File.ReadAllTextAsync(filePath);
            return content.Contains("NextUI", StringComparison.OrdinalIgnoreCase);
        }
        catch (Exception)
        {
            return false;
        }
    }

    private async Task<string?> GetNextUIVersion(string sdCardPath)
    {
        try
        {
            // Check for MinUI.zip and read .system/version.txt from inside the zip
            var minUIZipPath = Path.Combine(sdCardPath, "MinUI.zip");
            if (File.Exists(minUIZipPath))
            {
                try
                {
                    using var zip = ZipFile.OpenRead(minUIZipPath);
                    var versionEntry = zip.GetEntry(".system/version.txt");
                    if (versionEntry != null)
                    {
                        using var stream = versionEntry.Open();
                        using var reader = new StreamReader(stream);
                        var content = await reader.ReadToEndAsync();
                        if (content.Contains("NextUI", StringComparison.OrdinalIgnoreCase))
                        {
                            return content.Trim();
                        }
                    }
                }
                catch { }
            }

            // Check for .system\version.txt directly on filesystem
            var systemVersionPath = Path.Combine(sdCardPath, ".system", "version.txt");
            if (File.Exists(systemVersionPath))
            {
                try
                {
                    var content = await File.ReadAllTextAsync(systemVersionPath);
                    if (content.Contains("NextUI", StringComparison.OrdinalIgnoreCase))
                    {
                        return content.Trim();
                    }
                }
                catch { }
            }

            return null;
        }
        catch (Exception)
        {
            return null;
        }
    }

    // Log zipper overlay methods
    private void ShowLogZipperOverlay()
    {
        showLogZipperOverlay = true;
        StateHasChanged();
    }

    private void HideLogZipperOverlay()
    {
        showLogZipperOverlay = false;
        StateHasChanged();
    }
}

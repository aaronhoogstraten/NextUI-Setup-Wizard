@page "/bios-config-adb"
@using System.IO
@using Microsoft.Maui.Storage
@using NextUI_Setup_Wizard.Resources
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="bios-container">
    <h3 data-ref="page-header">BIOS Configuration (ADB Mode)</h3>
    <p class="intro-text">Select BIOS files for each gaming system. Files will be transferred directly to your emulation device via ADB.</p>

    <div class="adb-status">
        @if (isAdbReady && selectedDevice != null)
        {
            <div class="device-info">
                <span class="status-icon success">üì±</span>
                <span><strong>Connected Device:</strong> @selectedDevice.DisplayName</span>
                @if (deviceStorage != null)
                {
                    <span class="storage-text">(@deviceStorage.AvailableGB.ToString("F1") GB available)</span>
                }
            </div>
        }
        else
        {
            <div class="device-error">
                <span class="status-icon error">‚ö†Ô∏è</span>
                <span>ADB device not configured. <a href="/adb-config">Go to ADB Configuration</a></span>
            </div>
        }
    </div>

    <div class="systems-list">
        @foreach (var system in biosSystems)
        {
            <div class="system-card">
                <div class="system-header">
                    <h4>@system.SystemName</h4>
                    <span class="system-code">(@system.SystemCode)</span>
                </div>

                <div class="bios-files">
                    @foreach (var biosGroup in system.BiosFiles.GroupBy(b => b.FileName))
                    {
                        <div class="bios-file-group">
                            <div class="bios-file-row">
                                <div class="file-info">
                                    <div class="file-name-hash-row">
                                        <span class="file-name">@biosGroup.Key</span>
                                        <span class="file-hash">(sha1:@biosGroup.First().Sha1)</span>
                                    </div>
                                    <div class="file-paths">
                                        @foreach (var biosFile in biosGroup)
                                        {
                                            <span class="file-path">Device: @biosFile.DevicePath</span>
                                        }
                                    </div>
                                </div>

                                <div class="file-actions">
                                    @{
                                        var representativeBios = biosGroup.First();
                                        var isSelected = !string.IsNullOrEmpty(representativeBios.SelectedPath);
                                    }

                                    @if (isSelected)
                                    {
                                        <div class="file-status">
                                            <span class="status-icon selected">‚úì</span>
                                            <span class="selected-path" title="@representativeBios.SelectedPath">
                                                @Path.GetFileName(representativeBios.SelectedPath)
                                            </span>
                                            <button class="btn btn-sm btn-secondary" @onclick="() => ClearGroupSelection(biosGroup)">
                                                Clear
                                            </button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="file-status">
                                            <span class="status-icon missing">‚óã</span>
                                            <span class="missing-text">Not selected</span>
                                        </div>
                                    }

                                    <button class="btn btn-primary" @onclick="() => SelectBiosFile(biosGroup)" disabled="@isSelectingFile">
                                        @if (isSelectingFile && currentSelectingFile == representativeBios.FileName)
                                        {
                                            <span>Selecting...</span>
                                        }
                                        else
                                        {
                                            <span>Select File</span>
                                        }
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="summary-section">
        <div class="summary-stats">
            <p>
                <strong>Files Selected:</strong> @selectedFilesCount of @totalFilesCount
                (@(selectedFilesCount == totalFilesCount ? "Complete" : $"{totalFilesCount - selectedFilesCount} missing"))
            </p>
        </div>

        <div class="action-buttons">
            <button class="btn btn-secondary" @onclick="ClearAllSelections">Clear All</button>
            <button class="btn btn-success" @onclick="TransferBiosFilesToDevice" disabled="@(selectedFilesCount == 0 || isTransferring || !isAdbReady)">
                @if (isTransferring)
                {
                    <span>@transferProgress</span>
                }
                else
                {
                    <span>Transfer to Device (@selectedFilesCount)</span>
                }
            </button>
            <button class="btn btn-info" @onclick="SkipBiosSetup">@(hasSuccessfullyTransferredFiles ? "Continue to ROM Setup" : "Skip BIOS Setup")</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @(isSuccess ? "success" : "error")">
            @statusMessage
        </div>
    }

    @if (isTransferring)
    {
        <div data-ref="progress-container" class="transfer-progress">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @(transferPercentage)%"></div>
            </div>
            <p class="progress-text">@transferStatus</p>
        </div>
    }
</div>

<style>
    /* Most styles inherited from BiosConfig.razor, with ADB-specific additions */
    .bios-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .adb-status {
        background: #f1f8ff;
        border: 1px solid #c8e1ff;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 20px;
    }

    .device-info {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #0366d6;
    }

    .device-error {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #d73a49;
    }

    .device-error a {
        color: #0366d6;
        text-decoration: underline;
    }

    .storage-text {
        font-size: 0.9em;
        color: #586069;
    }

    .transfer-progress {
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 6px;
    }

    /* Inherit other styles from BiosConfig.razor */
    .intro-text {
        color: #586069;
        margin-bottom: 20px;
        font-size: 1.1em;
    }

    .systems-list {
        margin-bottom: 30px;
    }

    .system-card {
        background: #f6f8fa;
        border: 1px solid #d0d7de;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .system-header {
        background: #24292e;
        color: white;
        padding: 12px 16px;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .system-header h4 {
        margin: 0;
        font-size: 1.2em;
    }

    .system-code {
        background: rgba(255, 255, 255, 0.2);
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.85em;
        font-family: 'SFMono-Regular', Consolas, monospace;
    }

    .bios-files {
        padding: 16px;
    }

    .bios-file-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        background: white;
        border: 1px solid #e1e4e8;
        border-radius: 6px;
    }

    .file-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .file-name-hash-row {
        flex: 1;
        display: flex;
        flex-direction: row;
        gap: 4px;
    }

    .file-name {
        display: inline-flex;
        font-weight: 600;
        color: #24292e;
        font-family: 'SFMono-Regular', Consolas, monospace;
    }

    .file-hash {
        display: inline-flex;
        font-weight: 100;
        color: #24292e;
        font-family: 'SFMono-Regular', Consolas, monospace;
        font-size: 80%;
        align-self: safe center;
    }

    .file-paths {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }

    .file-path {
        font-size: 0.85em;
        color: #586069;
        font-family: 'SFMono-Regular', Consolas, monospace;
    }

    .file-actions {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .file-status {
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: 160px;
    }

    .status-icon {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
    }

    .status-icon.selected {
        background: #28a745;
        color: white;
    }

    .status-icon.missing {
        background: #e1e4e8;
        color: #d73a49;
        border: 2px solid #d0d7de;
    }

    .status-icon.success {
        color: #28a745;
    }

    .status-icon.error {
        color: #d73a49;
    }

    .selected-path {
        color: #28a745;
        font-family: 'SFMono-Regular', Consolas, monospace;
        font-size: 0.9em;
        max-width: 120px;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }

    .missing-text {
        color: #d73a49;
        font-size: 0.9em;
    }

    .btn {
        padding: 8px 12px;
        border: 1px solid #d0d7de;
        border-radius: 6px;
        background: #f6f8fa;
        color: #24292e;
        text-decoration: none;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s;
        white-space: nowrap;
    }

    .btn:hover {
        background: #f3f4f6;
        border-color: #d0d7de;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #2da44e;
        color: white;
        border-color: #2da44e;
    }

    .btn-primary:hover {
        background: #2c974b;
        border-color: #2c974b;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border-color: #6c757d;
    }

    .btn-secondary:hover {
        background: #5c636a;
        border-color: #5c636a;
    }

    .btn-success {
        background: #28a745;
        color: white;
        border-color: #28a745;
    }

    .btn-success:hover {
        background: #218838;
        border-color: #1e7e34;
    }

    .btn-info {
        background: #17a2b8;
        color: white;
        border-color: #17a2b8;
    }

    .btn-info:hover {
        background: #138496;
        border-color: #117a8b;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
    }

    .summary-section {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
    }

    .summary-stats {
        margin-bottom: 15px;
    }

    .summary-stats p {
        margin: 0;
        font-size: 1.1em;
        color: #495057;
    }

    .action-buttons {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .status-message {
        margin-top: 20px;
        padding: 12px;
        border-radius: 6px;
        font-weight: 500;
    }

    .status-message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 10px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        transition: width 0.3s ease;
        border-radius: 10px;
    }

    .progress-text {
        margin: 0;
        text-align: center;
        color: #495057;
        font-size: 0.9em;
    }

    @@media (max-width: 768px) {
        .bios-file-row {
            flex-direction: column;
            gap: 12px;
            align-items: stretch;
        }

        .file-actions {
            justify-content: space-between;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn {
            justify-content: center;
        }
    }
</style>

@code {
    private PlatformToolsExtractor? platformToolsExtractor;
    private AdbService? adbService;
    private AdbFileOperations? adbFileOps;
    private AdbDevice? selectedDevice;
    private DeviceStorageInfo? deviceStorage;

    private bool isSelectingFile = false;
    private string currentSelectingFile = "";
    private bool isTransferring = false;
    private string transferProgress = "";
    private string transferStatus = "";
    private int transferPercentage = 0;
    private string statusMessage = "";
    private bool isSuccess = false;
    private bool hasSuccessfullyTransferredFiles = false;

    private int selectedFilesCount => GetUniqueSelectedFiles().Count();
    private int totalFilesCount => GetUniqueFileNames().Count();

    private bool isAdbReady => platformToolsExtractor?.IsAdbAvailable() == true && selectedDevice != null;

    private List<BiosSystem> biosSystems = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize ADB components
        platformToolsExtractor = new PlatformToolsExtractor();

        if (platformToolsExtractor.IsAdbAvailable())
        {
            adbService = new AdbService(platformToolsExtractor.AdbExecutablePath);

            // Try to get first online device
            var devices = await adbService.GetDevicesAsync();
            selectedDevice = devices.FirstOrDefault(d => d.IsOnline);

            if (selectedDevice != null)
            {
                adbFileOps = new AdbFileOperations(adbService, selectedDevice.Id);
                deviceStorage = await adbService.GetStorageInfoAsync(selectedDevice.Id);
            }
        }

        InitializeBiosSystems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('[data-ref=\"page-header\"]').scrollIntoView({behavior: 'auto', block: 'start'});");
        }
    }

    private void InitializeBiosSystems()
    {
        var biosBasePath = "/mnt/SDCARD/Bios";

        biosSystems = new List<BiosSystem>
        {
            new BiosSystem(
                biosBasePath,
                systemName:"NES/Famicom",
                systemCode:"FC",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "disksys.rom",
                        SystemCode = "FC",
                        Sha1 = "57fe1bdee955bb48d357e463ccbf129496930b62",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Game Boy",
                systemCode:"GB",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "gb_bios.bin",
                        SystemCode = "GB",
                        Sha1 = "4ed31ec6b0b175bb109c0eb5fd3d193da823339f",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Game Boy Color",
                systemCode:"GBC",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "gbc_bios.bin",
                        SystemCode = "GBC",
                        Sha1 = "1293d68bf9643bc4f36954c1e80e38f39864528d",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Game Boy Advance",
                systemCode:"GBA / MGBA",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "gba_bios.bin",
                        SystemCode = "GBA",
                        Sha1 = "300c20df6731a33952ded8c436f7f186d25d3492",
                    },
                    new BiosFile
                    {
                        FileName = "gba_bios.bin",
                        SystemCode = "MGBA",
                        Sha1 = "300c20df6731a33952ded8c436f7f186d25d3492",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Mega Drive / Genesis / Sega CD",
                systemCode:"MD / Sega CD",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "bios_CD_E.bin",
                        SystemCode = "MD",
                        Sha1 = "f891e0ea651e2232af0c5c4cb46a0cae2ee8f356",
                    },
                    new BiosFile
                    {
                        FileName = "bios_CD_J.bin",
                        SystemCode = "MD",
                        Sha1 = "4846f448160059a7da0215a5df12ca160f26dd69",
                    },
                    new BiosFile
                    {
                        FileName = "bios_CD_U.bin",
                        SystemCode = "MD",
                        Sha1 = "f4f315adcef9b8feb0364c21ab7f0eaf5457f3ed",
                    },
                    new BiosFile
                    {
                        FileName = "bios_CD_E.bin",
                        SystemCode = "SEGACD",
                        Sha1 = "f891e0ea651e2232af0c5c4cb46a0cae2ee8f356",
                    },
                    new BiosFile
                    {
                        FileName = "bios_CD_J.bin",
                        SystemCode = "SEGACD",
                        Sha1 = "4846f448160059a7da0215a5df12ca160f26dd69",
                    },
                    new BiosFile
                    {
                        FileName = "bios_CD_U.bin",
                        SystemCode = "SEGACD",
                        Sha1 = "f4f315adcef9b8feb0364c21ab7f0eaf5457f3ed",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"PC Engine",
                systemCode:"PCE",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "syscard3.pce",
                        SystemCode = "PCE",
                        Sha1 = "79f5ff55dd10187c7fd7b8daab0b3ffbd1f56a2c",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Sony PlayStation",
                systemCode:"PS",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "psxonpsp660.bin",
                        SystemCode = "PS",
                        Sha1 = "96880d1ca92a016ff054be5159bb06fe03cb4e14",
                    }
                }
            ),
            new BiosSystem(
                biosBasePath,
                systemName:"Arcade",
                systemCode:"FBN",
                new List<BiosFile>
                {
                    new BiosFile
                    {
                        FileName = "neogeo.zip",
                        SystemCode = "FBN",
                        Sha1 = "deb62b0074b8cae4f162c257662136733cfc76ad",
                    }
                }
            ),
        };
    }

    private IEnumerable<string> GetUniqueFileNames()
    {
        return biosSystems
            .SelectMany(s => s.BiosFiles)
            .Select(f => f.FileName)
            .Distinct();
    }

    private IEnumerable<string> GetUniqueSelectedFiles()
    {
        return biosSystems
            .SelectMany(s => s.BiosFiles)
            .Where(f => !string.IsNullOrEmpty(f.SelectedPath))
            .Select(f => f.FileName)
            .Distinct();
    }

    private async Task SelectBiosFile(IGrouping<string, BiosFile> biosGroup)
    {
        try
        {
            isSelectingFile = true;
            currentSelectingFile = biosGroup.Key;
            StateHasChanged();

            var options = new PickOptions()
            {
                PickerTitle = $"Select {biosGroup.Key}",
            };

            var fileResult = await FilePicker.Default.PickAsync(options);

            if (fileResult != null)
            {
                if (string.Equals(fileResult.FileName, currentSelectingFile, StringComparison.OrdinalIgnoreCase))
                {
                    // Update all BIOS files in the group with the same selected path
                    foreach (var biosFile in biosGroup)
                    {
                        biosFile.SelectedPath = fileResult.FullPath;
                    }

                    // Also update any other BIOS files across all systems that have the same filename
                    foreach (var system in biosSystems)
                    {
                        foreach (var biosFile in system.BiosFiles.Where(f => f.FileName == biosGroup.Key))
                        {
                            biosFile.SelectedPath = fileResult.FullPath;
                        }
                    }

                    await SetStatusMessage($"Selected: {Path.GetFileName(fileResult.FullPath)} for {biosGroup.Key}", true);
                }
                else
                {
                    await SetStatusMessage($"Selected invalid file name {Path.GetFileName(fileResult.FullPath)} for {biosGroup.Key}", false);
                }
            }
        }
        catch (Exception ex)
        {
            await SetStatusMessage($"Error selecting file: {ex.Message}", false);
        }
        finally
        {
            isSelectingFile = false;
            currentSelectingFile = "";
            StateHasChanged();
        }
    }

    private void ClearGroupSelection(IGrouping<string, BiosFile> biosGroup)
    {
        // Clear all BIOS files with the same filename across all systems
        foreach (var system in biosSystems)
        {
            foreach (var biosFile in system.BiosFiles.Where(f => f.FileName == biosGroup.Key))
            {
                biosFile.SelectedPath = "";
            }
        }
        StateHasChanged();
    }

    private async Task ClearAllSelections()
    {
        foreach (var system in biosSystems)
        {
            foreach (var biosFile in system.BiosFiles)
            {
                biosFile.SelectedPath = "";
            }
        }
        await SetStatusMessage("All selections cleared.", true);
    }

    private async Task TransferBiosFilesToDevice()
    {
        if (adbFileOps == null || !isAdbReady)
        {
            await SetStatusMessage("ADB is not properly configured.", false);
            return;
        }

        var selectedFiles = biosSystems
            .SelectMany(s => s.BiosFiles)
            .Where(f => !string.IsNullOrEmpty(f.SelectedPath))
            .ToList();

        if (selectedFiles.Count == 0)
        {
            await SetStatusMessage("No files selected to transfer.", false);
            return;
        }

        try
        {
            isTransferring = true;
            transferPercentage = 0;
            transferProgress = "Transferring...";
            transferStatus = "Preparing to transfer files...";
            StateHasChanged();

            // Auto-scroll to progress bar
            await Task.Delay(50);
            await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('[data-ref=\"progress-container\"]').scrollIntoView({{behavior: 'smooth', block: 'end'}});");

            // Prepare file list for transfer
            var biosFilesToCopy = selectedFiles.Select(bf => new BiosFileCopy
            {
                SourcePath = bf.SelectedPath,
                FileName = bf.FileName,
                SystemCode = bf.SystemCode
            }).ToList();

            // Transfer files using ADB
            var progress = new Progress<string>(status =>
            {
                transferStatus = status;
                InvokeAsync(() =>
                {
                    // Update percentage based on status message if it contains progress info
                    if (status.Contains("(") && status.Contains("/"))
                    {
                        var match = System.Text.RegularExpressions.Regex.Match(status, @"\((\d+)/(\d+)\)");
                        if (match.Success && int.TryParse(match.Groups[1].Value, out var current) && int.TryParse(match.Groups[2].Value, out var total))
                        {
                            transferPercentage = (int)((current * 100) / total);
                        }
                    }
                    StateHasChanged();
                });
            });

            var result = await adbFileOps.CopyBiosFilesAsync(biosFilesToCopy, progress);

            if (result.IsSuccess)
            {
                transferPercentage = 100;
                transferProgress = "Complete!";
                transferStatus = "All selected files transferred successfully";
                hasSuccessfullyTransferredFiles = true;
                await SetStatusMessage($"Successfully transferred {GetUniqueSelectedFiles().Count()} unique BIOS file(s) to device.", true);

                // Reset after 3 seconds
                await Task.Delay(3000);
                isTransferring = false;
            }
            else
            {
                await SetStatusMessage($"Error transferring files: {result.Error}", false);
            }
        }
        catch (Exception ex)
        {
            await SetStatusMessage($"Error transferring files: {ex.Message}", false);
        }
        finally
        {
            if (!hasSuccessfullyTransferredFiles)
            {
                isTransferring = false;
            }
            StateHasChanged();
        }
    }

    private async Task SkipBiosSetup()
    {
        await SetStatusMessage("BIOS setup skipped. You can configure BIOS files later through the emulator settings.", true);
        Navigation.NavigateTo("/rom-config-adb");
    }

    private async Task ScrollToStatusMessage()
    {
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.status-message').scrollIntoView({behavior: 'smooth', block: 'center'});");
    }

    private async Task SetStatusMessage(string message, bool success)
    {
        statusMessage = message;
        isSuccess = success;
        StateHasChanged();
        await ScrollToStatusMessage();
    }

    public class BiosSystem
    {
        public string SystemName { get; set; } = "";
        public string SystemCode { get; set; } = "";
        public List<BiosFile> BiosFiles { get; set; } = new();

        public BiosSystem(string biosRootPath, string systemName, string systemCode, List<BiosFile> biosFiles)
        {
            SystemName = systemName;
            SystemCode = systemCode;
            BiosFiles = biosFiles;

            foreach (var biosFile in BiosFiles)
            {
                biosFile.DevicePath = $"{biosRootPath}/{biosFile.SystemCode}/{biosFile.FileName}";
            }
        }
    }

    public class BiosFile
    {
        public string FileName { get; set; } = "";
        public string SystemCode { get; set; } = "";
        public string DevicePath { get; set; } = "";
        public string SelectedPath { get; set; } = "";
        public string Sha1 { get; set; } = "";
    }
}
@page "/rom-config-adb"
@using System.IO
@using System.IO.Compression
@using Microsoft.Maui.Storage
@using NextUI_Setup_Wizard.Resources
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<div class="rom-container">
    <h3 data-ref="page-header">ROM Configuration (ADB Mode)</h3>
    <p class="intro-text">Select ROM files for each gaming system. Files will be transferred directly to your emulation device via ADB.</p>

    <div class="adb-status">
        @if (isAdbReady && selectedDevice != null)
        {
            <div class="device-info">
                <span class="status-icon success">üì±</span>
                <span><strong>Connected Device:</strong> @selectedDevice.DisplayName</span>
                @if (deviceStorage != null)
                {
                    <span class="storage-text">(@deviceStorage.AvailableGB.ToString("F1") GB available)</span>
                }
            </div>
        }
        else
        {
            <div class="device-error">
                <span class="status-icon error">‚ö†Ô∏è</span>
                <span>ADB device not configured. <a href="/adb-config">Go to ADB Configuration</a></span>
            </div>
        }
    </div>

    <div class="systems-list">
        @foreach (var system in romSystems)
        {
            <div class="system-card">
                <div class="system-header">
                    <div class="header-left">
                        <h4>@system.SystemName</h4>
                        <span class="system-code">(@system.SystemCode)</span>
                    </div>
                    <div class="header-right">
                        @if (system.SystemCode == "SUPA" || system.SystemCode == "SFC")
                        {
                            <button class="btn btn-sm btn-header" title="@(system.SystemCode == "SUPA" ? "SFC: Snes9x 2005 Plus" : "SUPA: Supafaust")" @onclick="() => ToggleSnesSystemCode(system)">
                                Switch to @(system.SystemCode == "SUPA" ? "SFC" : "SUPA")
                            </button>
                        }
                        @if (system.SystemCode == "GBA" || system.SystemCode == "MGBA")
                        {
                            <button class="btn btn-sm btn-header" title="@(system.SystemCode == "GBA" ? "MGBA: very stable (especially for romhacks), but worse\nfor battery life and doesn't FFWD as well as GBA (gpSP)" : "GBA (gpSP): very good at FFWD, best for battery life,\nbut can be not as stable (especially for romhacks) as MGBA")" @onclick="() => ToggleGbaSystemCode(system)">
                                Switch to @(system.SystemCode == "GBA" ? "MGBA" : "GBA")
                            </button>
                        }
                    </div>
                </div>

                <div class="rom-files">
                    <div class="system-info">
                        <div class="file-info">
                            <div class="destination-path">
                                <span class="path-label">Device Path:</span>
                                <span class="file-path">@system.DevicePath</span>
                            </div>
                            <div class="supported-formats">
                                <span class="formats-label">Supported formats:</span>
                                <span class="formats-text">@string.Join(", ", system.SupportedFormats)</span>
                            </div>
                        </div>

                        <div class="file-actions">
                            <div class="file-status">
                                @if (system.SelectedFiles.Count > 0)
                                {
                                    <span class="status-icon selected">‚úì</span>
                                    <span class="selected-count">@system.SelectedFiles.Count file(s) selected</span>
                                    <button class="btn btn-sm btn-secondary" @onclick="() => ClearSystemSelection(system)">
                                        Clear
                                    </button>
                                }
                                else
                                {
                                    <span class="status-icon missing">‚óã</span>
                                    <span class="missing-text">No files selected</span>
                                }
                            </div>

                            <button class="btn btn-primary" @onclick="() => SelectRomFiles(system)" disabled="@isSelectingFiles">
                                @if (isSelectingFiles && currentSelectingSystem == system.SystemCode)
                                {
                                    <span>Selecting...</span>
                                }
                                else
                                {
                                    <span>Select ROM Files</span>
                                }
                            </button>
                        </div>
                    </div>

                    @if (system.SelectedFiles.Count > 0)
                    {
                        <div class="selected-files-list">
                            <h5>Selected Files:</h5>
                            <div class="files-grid">
                                @foreach (var file in system.SelectedFiles)
                                {
                                    <div class="file-item">
                                        <span class="file-icon">üìÑ</span>
                                        <span class="file-name" title="@file.FullPath">@file.FileName</span>
                                        <button class="btn btn-xs btn-danger" @onclick="() => RemoveFile(system, file)">√ó</button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <div class="summary-section">
        <div class="summary-stats">
            <p>
                <strong>Total Files Selected:</strong> @totalSelectedFiles
                (@systemsWithFiles systems have files)
            </p>
            <div class="systems-breakdown">
                @foreach (var system in romSystems.Where(s => s.SelectedFiles.Count > 0))
                {
                    <span class="system-count">@system.SystemCode: @system.SelectedFiles.Count files</span>
                }
            </div>
        </div>

        <div class="action-buttons">
            <button class="btn btn-secondary" @onclick="ClearAllSelections">Clear All</button>
            <button class="btn btn-success" @onclick="TransferRomsToDevice" disabled="@(totalSelectedFiles == 0 || isTransferring || !isAdbReady)">
                @if (isTransferring)
                {
                    <span>@transferProgress</span>
                }
                else
                {
                    <span>Transfer ROMs (@totalSelectedFiles files)</span>
                }
            </button>
            <button class="btn btn-info" @onclick="SkipRomSetup">@(hasSuccessfullyTransferredFiles ? "Continue to Installation" : "Skip ROM Setup")</button>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(statusMessage))
    {
        <div class="status-message @(isSuccess ? "success" : "error")">
            @statusMessage
        </div>
    }

    @if (isTransferring)
    {
        <div data-ref="progress-container" class="transfer-progress">
            <div class="progress-bar">
                <div class="progress-fill" style="width: @(transferPercentage)%"></div>
            </div>
            <p class="progress-text">@transferStatus</p>
        </div>
    }
</div>

<style>
    /* Inherit styles from RomConfig.razor with ADB-specific additions */
    .rom-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 20px;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    }

    .adb-status {
        background: #f1f8ff;
        border: 1px solid #c8e1ff;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 20px;
    }

    .device-info {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #0366d6;
    }

    .device-error {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #d73a49;
    }

    .device-error a {
        color: #0366d6;
        text-decoration: underline;
    }

    .storage-text {
        font-size: 0.9em;
        color: #586069;
    }

    .transfer-progress {
        margin-top: 20px;
        padding: 15px;
        background: #f8f9fa;
        border-radius: 6px;
    }

    /* Continue with inherited styles... */
    .intro-text {
        color: #586069;
        margin-bottom: 20px;
        font-size: 1.1em;
    }

    .systems-list {
        margin-bottom: 30px;
    }

    .system-card {
        background: #f6f8fa;
        border: 1px solid #d0d7de;
        border-radius: 8px;
        margin-bottom: 20px;
        overflow: hidden;
    }

    .system-header {
        background: #24292e;
        color: white;
        padding: 12px 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 10px;
    }

    .header-left {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .header-right {
        display: flex;
        align-items: center;
    }

    .system-header h4 {
        margin: 0;
        font-size: 1.2em;
    }

    .system-code {
        background: rgba(255, 255, 255, 0.2);
        padding: 2px 8px;
        border-radius: 4px;
        font-size: 0.85em;
        font-family: 'SFMono-Regular', Consolas, monospace;
    }

    .rom-files {
        padding: 16px;
    }

    .system-info {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 12px;
        background: white;
        border: 1px solid #e1e4e8;
        border-radius: 6px;
        margin-bottom: 12px;
    }

    .file-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

    .destination-path, .supported-formats {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .path-label, .formats-label {
        font-weight: 600;
        color: #24292e;
        font-size: 0.9em;
        min-width: 90px;
    }

    .file-path {
        font-family: 'SFMono-Regular', Consolas, monospace;
        color: #586069;
        font-size: 0.85em;
    }

    .formats-text {
        color: #586069;
        font-size: 0.85em;
        font-style: italic;
    }

    .file-actions {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .file-status {
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: 180px;
    }

    .status-icon {
        width: 18px;
        height: 18px;
        border-radius: 50%;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        font-size: 12px;
        font-weight: bold;
    }

    .status-icon.selected {
        background: #28a745;
        color: white;
    }

    .status-icon.missing {
        background: #e1e4e8;
        color: #d73a49;
        border: 2px solid #d0d7de;
    }

    .status-icon.success {
        color: #28a745;
    }

    .status-icon.error {
        color: #d73a49;
    }

    .selected-count {
        color: #28a745;
        font-size: 0.9em;
        font-weight: 500;
    }

    .missing-text {
        color: #d73a49;
        font-size: 0.9em;
    }

    .selected-files-list {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 6px;
        padding: 12px;
    }

    .selected-files-list h5 {
        margin: 0 0 10px 0;
        color: #495057;
        font-size: 0.95em;
    }

    .files-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 8px;
    }

    .file-item {
        display: flex;
        align-items: center;
        gap: 8px;
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 6px 10px;
        font-size: 0.85em;
    }

    .file-icon {
        font-size: 14px;
    }

    .file-name {
        flex: 1;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
        color: #495057;
    }

    .btn {
        padding: 8px 12px;
        border: 1px solid #d0d7de;
        border-radius: 6px;
        background: #f6f8fa;
        color: #24292e;
        text-decoration: none;
        cursor: pointer;
        font-size: 13px;
        font-weight: 500;
        display: inline-flex;
        align-items: center;
        transition: all 0.2s;
        white-space: nowrap;
    }

    .btn:hover {
        background: #f3f4f6;
        border-color: #d0d7de;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .btn-primary {
        background: #2da44e;
        color: white;
        border-color: #2da44e;
    }

    .btn-primary:hover {
        background: #2c974b;
        border-color: #2c974b;
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
        border-color: #6c757d;
    }

    .btn-secondary:hover {
        background: #5c636a;
        border-color: #5c636a;
    }

    .btn-success {
        background: #28a745;
        color: white;
        border-color: #28a745;
    }

    .btn-success:hover {
        background: #218838;
        border-color: #1e7e34;
    }

    .btn-info {
        background: #17a2b8;
        color: white;
        border-color: #17a2b8;
    }

    .btn-info:hover {
        background: #138496;
        border-color: #117a8b;
    }

    .btn-header {
        background: rgba(255, 255, 255, 0.15);
        color: white;
        border-color: rgba(255, 255, 255, 0.3);
        font-size: 11px;
        padding: 4px 8px;
    }

    .btn-header:hover {
        background: rgba(255, 255, 255, 0.25);
        border-color: rgba(255, 255, 255, 0.5);
        color: white;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
        border-color: #dc3545;
    }

    .btn-danger:hover {
        background: #c82333;
        border-color: #bd2130;
    }

    .btn-sm {
        padding: 4px 8px;
        font-size: 12px;
    }

    .btn-xs {
        padding: 2px 6px;
        font-size: 11px;
        min-width: 20px;
        justify-content: center;
    }

    .summary-section {
        background: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        margin-top: 20px;
    }

    .summary-stats {
        margin-bottom: 15px;
    }

    .summary-stats p {
        margin: 0 0 10px 0;
        font-size: 1.1em;
        color: #495057;
    }

    .systems-breakdown {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .system-count {
        background: #e9ecef;
        padding: 4px 8px;
        border-radius: 4px;
        font-size: 0.85em;
        color: #495057;
        font-family: 'SFMono-Regular', Consolas, monospace;
    }

    .action-buttons {
        display: flex;
        gap: 12px;
        flex-wrap: wrap;
    }

    .status-message {
        margin-top: 20px;
        padding: 12px;
        border-radius: 6px;
        font-weight: 500;
    }

    .status-message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .status-message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .progress-bar {
        width: 100%;
        height: 20px;
        background: #e9ecef;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 10px;
    }

    .progress-fill {
        height: 100%;
        background: linear-gradient(90deg, #28a745, #20c997);
        transition: width 0.3s ease;
        border-radius: 10px;
    }

    .progress-text {
        margin: 0;
        text-align: center;
        color: #495057;
        font-size: 0.9em;
    }

    @@media (max-width: 768px) {
        .system-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 8px;
        }

        .header-left {
            width: 100%;
        }

        .header-right {
            width: 100%;
            justify-content: flex-end;
        }

        .system-info {
            flex-direction: column;
            gap: 12px;
            align-items: stretch;
        }

        .file-actions {
            justify-content: space-between;
        }

        .action-buttons {
            flex-direction: column;
        }

        .btn {
            justify-content: center;
        }

        .files-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private PlatformToolsExtractor? platformToolsExtractor;
    private AdbService? adbService;
    private AdbFileOperations? adbFileOps;
    private AdbDevice? selectedDevice;
    private DeviceStorageInfo? deviceStorage;

    private bool isSelectingFiles = false;
    private string currentSelectingSystem = "";
    private bool isTransferring = false;
    private string transferProgress = "";
    private string transferStatus = "";
    private int transferPercentage = 0;
    private string statusMessage = "";
    private bool isSuccess = false;
    private bool hasSuccessfullyTransferredFiles = false;

    private int totalSelectedFiles => romSystems.Sum(s => s.SelectedFiles.Count);
    private int systemsWithFiles => romSystems.Count(s => s.SelectedFiles.Count > 0);

    private bool isAdbReady => platformToolsExtractor?.IsAdbAvailable() == true && selectedDevice != null;

    private List<RomSystem> romSystems = new();

    protected override async Task OnInitializedAsync()
    {
        // Initialize ADB components
        platformToolsExtractor = new PlatformToolsExtractor();

        if (platformToolsExtractor.IsAdbAvailable())
        {
            adbService = new AdbService(platformToolsExtractor.AdbExecutablePath);

            // Try to get first online device
            var devices = await adbService.GetDevicesAsync();
            selectedDevice = devices.FirstOrDefault(d => d.IsOnline);

            if (selectedDevice != null)
            {
                adbFileOps = new AdbFileOperations(adbService, selectedDevice.Id);
                deviceStorage = await adbService.GetStorageInfoAsync(selectedDevice.Id);
            }
        }

        InitializeRomSystems();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('[data-ref=\"page-header\"]').scrollIntoView({behavior: 'auto', block: 'start'});");
        }
    }

    private void InitializeRomSystems()
    {
        var baseDevicePath = "/mnt/SDCARD/Roms";

        romSystems = new List<RomSystem>
        {
            new RomSystem
            {
                SystemName = "NES/Famicom",
                RomPathSystemName = "Nintendo Entertainment System",
                SystemCode = "FC",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".nes", ".fds", ".zip" }
            },
            new RomSystem
            {
                SystemName = "SNES",
                RomPathSystemName = "Super Nintendo Entertainment System",
                SystemCode = "SUPA",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".sfc", ".smc", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Game Boy",
                SystemCode = "GB",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".gb", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Game Boy Color",
                SystemCode = "GBC",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".gbc", ".gb", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Game Boy Advance",
                SystemCode = "GBA",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".gba", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Sega Mega Drive / Sega Genesis",
                RomPathSystemName = "Sega Genesis",
                SystemCode = "MD",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".md", ".gen", ".smd", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Sega CD",
                SystemCode = "SEGACD",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".cue", ".iso", ".chd", ".zip" }
            },
            new RomSystem
            {
                SystemName = "PC Engine",
                SystemCode = "PCE",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".pce", ".cue", ".iso", ".chd", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Sony PlayStation",
                SystemCode = "PS",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".cue", ".iso", ".chd", ".pbp", ".zip" }
            },
            new RomSystem
            {
                SystemName = "Arcade",
                SystemCode = "FBN",
                BaseDevicePath = baseDevicePath,
                SupportedFormats = new List<string>{ ".zip" }
            }
        };
    }

    private async Task SelectRomFiles(RomSystem system)
    {
        try
        {
            isSelectingFiles = true;
            currentSelectingSystem = system.SystemCode;
            StateHasChanged();

            var options = new PickOptions()
            {
                PickerTitle = $"Select ROM files for {system.SystemName}",
            };

            var results = await FilePicker.Default.PickMultipleAsync(options);

            if (results != null && results.Any())
            {
                var validFiles = new List<FileResult>();
                var invalidFiles = new List<string>();

                foreach (var file in results)
                {
                    var extension = Path.GetExtension(file.FileName).ToLowerInvariant();
                    if (extension == ".zip")
                    {
                        if (system.SupportedFormats.Count == 1 && system.SupportedFormats[0] == ".zip")
                        {
                            validFiles.Add(file);
                        }
                        else
                        {
                            var zip = ZipFile.OpenRead(file.FullPath);
                            if (system.SupportedFormats.Where(format => format != ".zip").Any(format => zip.Entries.Any(entry => entry.Name.ToLowerInvariant().EndsWith(format))))
                            {
                                validFiles.Add(file);
                            }
                            else
                            {
                                invalidFiles.Add(file.FileName);
                            }
                        }
                    }
                    else
                    {
                        if (system.SupportedFormats.Contains(extension))
                        {
                            validFiles.Add(file);
                        }
                        else
                        {
                            invalidFiles.Add(file.FileName);
                        }
                    }
                }

                // Add valid files to the system
                system.SelectedFiles.AddRange(validFiles);

                if (validFiles.Count > 0)
                {
                    var message = $"Added {validFiles.Count} ROM file(s) to {system.SystemName}";
                    if (invalidFiles.Count > 0)
                    {
                        message += $". {invalidFiles.Count} file(s) were skipped due to unsupported format.";
                    }
                    await SetStatusMessage(message, true);
                }
                else
                {
                    await SetStatusMessage($"No valid ROM files selected for {system.SystemName}. Supported formats: {string.Join(", ", system.SupportedFormats)}", false);
                }
            }
        }
        catch (Exception ex)
        {
            await SetStatusMessage($"Error selecting ROM files: {ex.Message}", false);
        }
        finally
        {
            isSelectingFiles = false;
            currentSelectingSystem = "";
            StateHasChanged();
        }
    }

    private void RemoveFile(RomSystem system, FileResult file)
    {
        system.SelectedFiles.Remove(file);
        StateHasChanged();
    }

    private async Task ClearSystemSelection(RomSystem system)
    {
        system.SelectedFiles.Clear();
        await SetStatusMessage($"Cleared all ROM files for {system.SystemName}", true);
    }

    private async Task ClearAllSelections()
    {
        foreach (var system in romSystems)
        {
            system.SelectedFiles.Clear();
        }
        await SetStatusMessage("All ROM selections cleared.", true);
    }

    private async Task TransferRomsToDevice()
    {
        if (adbFileOps == null || !isAdbReady)
        {
            await SetStatusMessage("ADB is not properly configured.", false);
            return;
        }

        var allSelectedFiles = romSystems
            .SelectMany(s => s.SelectedFiles.Select(f => new { System = s, File = f }))
            .ToList();

        if (allSelectedFiles.Count == 0)
        {
            await SetStatusMessage("No ROM files selected to transfer.", false);
            return;
        }

        try
        {
            isTransferring = true;
            transferPercentage = 0;
            transferProgress = "Transferring...";
            transferStatus = "Preparing to transfer ROM files...";
            StateHasChanged();

            // Auto-scroll to progress bar
            await Task.Delay(50);
            await JSRuntime.InvokeVoidAsync("eval", $"document.querySelector('[data-ref=\"progress-container\"]').scrollIntoView({{behavior: 'smooth', block: 'end'}});");

            // Prepare file list for transfer
            var romFilesToCopy = allSelectedFiles.Select(item => new RomFileCopy
            {
                SourcePath = item.File.FullPath,
                FileName = item.File.FileName,
                SystemCode = item.System.SystemCode,
                SystemName = item.System.SystemName
            }).ToList();

            // Transfer files using ADB
            var progress = new Progress<string>(status =>
            {
                transferStatus = status;
                InvokeAsync(() =>
                {
                    // Update percentage based on status message if it contains progress info
                    if (status.Contains("(") && status.Contains("/"))
                    {
                        var match = System.Text.RegularExpressions.Regex.Match(status, @"\((\d+)/(\d+)\)");
                        if (match.Success && int.TryParse(match.Groups[1].Value, out var current) && int.TryParse(match.Groups[2].Value, out var total))
                        {
                            transferPercentage = (int)((current * 100) / total);
                        }
                    }
                    StateHasChanged();
                });
            });

            var result = await adbFileOps.CopyRomFilesAsync(romFilesToCopy, progress);

            if (result.IsSuccess)
            {
                transferPercentage = 100;
                transferProgress = "Complete!";
                transferStatus = "All ROM files transferred successfully";
                hasSuccessfullyTransferredFiles = true;

                var systemsCopied = romSystems.Where(s => s.SelectedFiles.Count > 0).Count();
                await SetStatusMessage($"Successfully transferred {allSelectedFiles.Count} ROM file(s) to {systemsCopied} system(s) on device.", true);

                // Reset after 3 seconds
                await Task.Delay(3000);
                isTransferring = false;
            }
            else
            {
                await SetStatusMessage($"Error transferring files: {result.Error}", false);
            }
        }
        catch (Exception ex)
        {
            await SetStatusMessage($"Error transferring ROM files: {ex.Message}", false);
        }
        finally
        {
            if (!hasSuccessfullyTransferredFiles)
            {
                isTransferring = false;
            }
            StateHasChanged();
        }
    }

    private async Task SkipRomSetup()
    {
        await SetStatusMessage("ROM setup skipped. You can add ROM files later by copying them to the appropriate system directories on your device.", true);
        Navigation.NavigateTo("/setup-complete");
    }

    private async Task ToggleSnesSystemCode(RomSystem system)
    {
        if (system.SystemCode == "SUPA")
        {
            system.SystemCode = "SFC";
        }
        else if (system.SystemCode == "SFC")
        {
            system.SystemCode = "SUPA";
        }

        await SetStatusMessage($"System code changed to {system.SystemCode}. Device path updated to: {system.DevicePath}", true);
    }

    private async Task ToggleGbaSystemCode(RomSystem system)
    {
        if (system.SystemCode == "GBA")
        {
            system.SystemCode = "MGBA";
        }
        else if (system.SystemCode == "MGBA")
        {
            system.SystemCode = "GBA";
        }

        await SetStatusMessage($"System code changed to {system.SystemCode}. Device path updated to: {system.DevicePath}", true);
    }

    private async Task ScrollToStatusMessage()
    {
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("eval", "document.querySelector('.status-message').scrollIntoView({behavior: 'smooth', block: 'center'});");
    }

    private async Task SetStatusMessage(string message, bool success)
    {
        statusMessage = message;
        isSuccess = success;
        StateHasChanged();
        await ScrollToStatusMessage();
    }

    public class RomSystem
    {
        public string SystemName { get; set; } = "";
        public string RomPathSystemName { get; set; } = "";
        public string SystemCode { get; set; } = "";
        public string BaseDevicePath { get; set; } = "";
        public List<string> SupportedFormats { get; set; } = new();
        public List<FileResult> SelectedFiles { get; set; } = new();

        public string DevicePath
        {
            get
            {
                var pathSystemName = !string.IsNullOrEmpty(RomPathSystemName) ? RomPathSystemName : SystemName;
                return $"{BaseDevicePath}/{pathSystemName} ({SystemCode})";
            }
        }
    }
}